using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.DirectoryServices.AccountManagement;
using System.DirectoryServices;


namespace CPVulnerabilityFramework.Core
{
    /// <summary>
    /// Success: When condition is met, Regress: Depends, Failure: If user is deleted
    /// </summary>
    public sealed class UA_PasswordVuln : UserAccountVulnerability
    {
        /// <summary>
        /// A password based user vulnerability
        /// </summary>
        /// <param name="points"></param>
        /// <param name="vulntype">A password vulnerability. Other vulnerabilities will result in a disabled vulnerability object</param>
        /// <param name="username"></param>
        public UA_PasswordVuln(int points, AccountVulnType vulntype, string username ) : base(points, vulntype, username)
        {
            if (!Enabled)
                return;
            switch (VulnType)
            {
                case AccountVulnType.PasswordForever:
                case AccountVulnType.DisableReversableEncryption:
                case AccountVulnType.PasswordChangeable:
                case AccountVulnType.PasswordExpires:
                case AccountVulnType.PasswordImmutable:
                    RegressionEnabled = true;
                    break;
                case AccountVulnType.ForceExpirePassword:
                    RegressionEnabled = false;
                    break;
                default:
                    Enabled = false; //Invalid password vulntype
                    break;
            }
            if (User == null)
                Enabled = false;
            OnCompleted += VulnCompleted;
            OnFailed += VulnFailed;
        }

        /// <summary>
        /// Internal use only
        /// </summary>
        public UA_PasswordVuln() : base()
        {

        }

        /// <summary>
        /// Create a vuln from string arguments
        /// </summary>
        /// <param name="args">0:points,1:vulntype,2:username</param>
        /// <returns></returns>
        public override Vulnerability TranslateArgs(params string[] args)
        {
            try
            {
                int ipoints = Convert.ToInt32(args[0]);
                Enum.TryParse(args[1], true, out AccountVulnType vtype);
                return new UA_PasswordVuln(ipoints, vtype, args[2]);
            }
            catch
            {
                return null;
            }
        }

        private void VulnCompleted(Vulnerability sender, VulnerabilityEventArgs e)
        {
            switch(VulnType)
            {
                case AccountVulnType.PasswordForever:
                    Message = UserName + " has an indefinite password age";
                    break;
                case AccountVulnType.DisableReversableEncryption:
                    Message = UserName + "'s account no longer allows reversible encryption";
                    break;
                case AccountVulnType.PasswordExpires:
                    Message = UserName + " no longer has an indefinite password age";
                    break;
                case AccountVulnType.ForceExpirePassword:
                    Message = UserName + "'s password has expired";
                    break;
                case AccountVulnType.PasswordChangeable:
                    Message = UserName + "'s password is now changeable";
                    break;
                case AccountVulnType.PasswordImmutable:
                    Message = UserName + "'s password is no longer changeable";
                    break;
            }
        }

        private void VulnFailed(Vulnerability sender, VulnerabilityEventArgs e)
        {
            Message = "User " + UserName + " was destroyed!";
        }

        

        /// <summary>
        /// Evalutate the state of the vulnerability
        /// </summary>
        protected override void EvaluateVulnerability()
        {
            try
            {
                switch (VulnType)
                {
                    case AccountVulnType.DisableReversableEncryption:
                        Completed = !UserFlagSet(UserFlags.ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED);
                        break;
                    case AccountVulnType.ForceExpirePassword:
                        DateTime ExpireTime = (DateTime) User.InvokeGet("PasswordExpirationDate");
                        if((ExpireTime - DateTime.Today).TotalMilliseconds > 1)
                        {
                            Completed = true;
                        }
                        break;
                    case AccountVulnType.PasswordExpires:
                        Completed = !UserFlagSet(UserFlags.ADS_UF_DONT_EXPIRE_PASSWD);
                        break;
                    case AccountVulnType.PasswordForever:
                        Completed = UserFlagSet(UserFlags.ADS_UF_DONT_EXPIRE_PASSWD);
                        break;
                    case AccountVulnType.PasswordChangeable:
                        Completed = !UserFlagSet(UserFlags.ADS_UF_PASSWD_CANT_CHANGE);
                        break;
                    case AccountVulnType.PasswordImmutable:
                        Completed = UserFlagSet(UserFlags.ADS_UF_PASSWD_CANT_CHANGE);
                        break;
                }
            }
            catch
            {
                Failed = true; //Exception occured, user must not exist...
            }
            
        }

    }
}
