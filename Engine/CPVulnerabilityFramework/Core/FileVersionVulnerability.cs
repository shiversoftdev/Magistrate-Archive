using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;

namespace CPVulnerabilityFramework.Core
{
    /// <summary>
    /// Success: Version >= TargetVersion, Regression: Yes, Failure: No
    /// </summary>
    public sealed class FileVersionVulnerability : Vulnerability
    {
        private readonly string FilePath;
        private readonly string TargetVersion;

        /// <summary>
        /// A file version based vulnerability
        /// </summary>
        /// <param name="points">Amount of points to award on completion</param>
        /// <param name="filepath">The path to the file version</param>
        /// <param name="targetversion">The target version of the file</param>
        public FileVersionVulnerability(int points, string filepath, string targetversion) : base(points)
        {
            FilePath = filepath;
            TargetVersion = targetversion;
            RegressionEnabled = true;
            OnCompleted += VulnComplete;
        }

        /// <summary>
        /// Internal use only
        /// </summary>
        public FileVersionVulnerability() : base()
        {

        }

        /// <summary>
        /// Create a vuln from string arguments
        /// </summary>
        /// <param name="args">0:points,1:filepath,2:targetversion</param>
        /// <returns></returns>
        public override Vulnerability TranslateArgs(params string[] args)
        {
            try
            {
                return new FileVersionVulnerability(Convert.ToInt32(args[0]), args[1], args[2]);
            }
            catch
            {
                return null;
            }
        }

        private void VulnComplete(Vulnerability vuln, VulnerabilityEventArgs e)
        {
            Message = "File " + UppercaseFirst(Path.GetFileNameWithoutExtension(FilePath)) + " was updated to the required version";
        }

        /// <summary>
        /// Evaluate the vulnerability for completion
        /// </summary>
        protected override void EvaluateVulnerability()
        {
            if (!File.Exists(FilePath))
            {
                Completed = false;
                return;
            }
            FileVersionInfo version = FileVersionInfo.GetVersionInfo(FilePath);
            Completed = version.FileVersion.CompareTo(TargetVersion) > 0;
        }

        /// <summary>
        /// Yoink
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        private static string UppercaseFirst(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            return char.ToUpper(s[0]) + s.Substring(1);
        }
    }
}
