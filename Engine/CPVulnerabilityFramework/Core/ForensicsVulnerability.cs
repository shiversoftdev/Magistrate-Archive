using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CPVulnerabilityFramework.Core
{
    /// <summary>
    /// Success: Include all the correct answer strings anywhere in the file, Regress: No, Failure: No
    /// </summary>
    public sealed class ForensicsVulnerability : Vulnerability
    {
        private readonly string FilePath;
        private FileInfo Forensics;
        private readonly int MaxFileSize;
        private string[] TargetAnswers;
        private string[] FileData;

        /// <summary>
        /// A vulnerability that monitors a forensics file
        /// </summary>
        /// <param name="pointvalue">How many points to award on completion</param>
        /// <param name="path">The path of the forensics file</param>
        /// <param name="TargetAnswers">An array of required answers in the file</param>
        /// <param name="MaxFileSize">The maximum amount of bytes that the file can contain to be evaluated</param>
        public ForensicsVulnerability(int pointvalue, string path, string[] TargetAnswers, int MaxFileSize = 4096) : base(pointvalue)
        {
            this.TargetAnswers = TargetAnswers;
            this.MaxFileSize = MaxFileSize;
            FilePath = path;
            if(!File.Exists(path))
            {
                Enabled = false;
            }
            RegressionEnabled = false;
            OnCompleted += VulnCompleted;

        }

        /// <summary>
        /// Internal use only
        /// </summary>
        public ForensicsVulnerability() : base()
        {

        }

        /// <summary>
        /// A forensics question monitoring vulnerability
        /// </summary>
        /// <param name="pointvalue">Amount of points to award on completion</param>
        /// <param name="path">The file path of the question to monitor</param>
        /// <param name="TargetAnswers">All the answers required to be in the file</param>
        /// <param name="MaxFileSize">The maximum size of the file to interpret in bytes. Default is 4096 </param>
        /// <returns></returns>
        public static ForensicsVulnerability TranslateArgs(string pointvalue, string path, string[] TargetAnswers, string MaxFileSize = "4096")
        {
            try
            {
                return new ForensicsVulnerability(Convert.ToInt32(pointvalue), path, TargetAnswers, Convert.ToInt32(MaxFileSize));
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// Create a vuln from string arguments
        /// </summary>
        /// <param name="args">0:pointvalue,1:path,2:MaxFileSize,targetanswers[]</param>
        /// <returns></returns>
        public override Vulnerability TranslateArgs(params string[] args)
        {
            try
            {
                List<string> answers = new List<string>();
                for(int i = 3; i < args.Length; i++)
                {
                    answers.Add(args[i]);
                }
                return new ForensicsVulnerability(Convert.ToInt32(args[0]), args[1], answers.ToArray(), Convert.ToInt32(args[2]));
            }
            catch
            {
                return null;
            }
        }

        private void VulnCompleted(Vulnerability sender, VulnerabilityEventArgs e)
        {
            Message = "Answered forensics question correctly";
        }

        /// <summary>
        /// Evalutate the state of the vulnerability
        /// </summary>
        protected override void EvaluateVulnerability()
        {
            if (!File.Exists(FilePath))
                return;
            if (TargetAnswers == null || TargetAnswers.Length < 1)
                return;
            Forensics = new FileInfo(FilePath);
            if (Forensics.Length > this.MaxFileSize) //We wont read a massive file into memory
                return;

            try
            {
                FileData = File.ReadAllLines(FilePath);
                foreach(string answer in TargetAnswers)
                {
                    if(!FileData.Contains(answer))
                    {
                        return;
                    }
                }
                Completed = true;
            }
            catch
            {

            }
        }
    }
}
