using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace CPVulnerabilityFramework.Core
{
    /// <summary>
    /// Success: Remove a file, Regress: No, Fail: No
    /// </summary>
    public sealed class FileRemoveVulnerability : Vulnerability
    {
        private readonly string FileName;
        /// <summary>
        /// Vulnerability that monitors a file's existance
        /// </summary>
        /// <param name="PointValue"></param>
        /// <param name="FileLocation"></param>
        public FileRemoveVulnerability(int PointValue, string FileLocation) : base(PointValue)
        {
            if(!File.Exists(FileLocation))
            {
                Enabled = false; //If the file doesnt exist to begin with, how can we delete it?
            }
            FileName = FileLocation;
            OnCompleted += VulnComplete;
            RegressionEnabled = false;
        }

        /// <summary>
        /// Internal use only
        /// </summary>
        public FileRemoveVulnerability() : base()
        {

        }

        /// <summary>
        /// Create a vuln from string arguments
        /// </summary>
        /// <param name="args">0:points,1:filelocation</param>
        /// <returns></returns>
        public override Vulnerability TranslateArgs(params string[] args)
        {
            try
            {
                return new FileRemoveVulnerability(Convert.ToInt32(args[0]), args[1]);
            }
            catch
            {
                return null;
            }
        }

        private void VulnComplete(Vulnerability sender, VulnerabilityEventArgs e)
        {
            Message = "File " + FileName + " was removed.";
        }

        /// <summary>
        /// Evalutate the state of the vulnerability
        /// </summary>
        protected override void EvaluateVulnerability()
        {
            Completed = !File.Exists(FileName);
        }
    }
}
