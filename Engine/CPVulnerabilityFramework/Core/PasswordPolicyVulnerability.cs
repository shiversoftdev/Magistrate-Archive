using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using CPVulnerabilityFramework.Core.Lib;

namespace CPVulnerabilityFramework.Core
{
    /// <summary>
    /// Success: When the password policy matches the target value, Regression: Yes, Failure: No
    /// </summary>
    public sealed class PasswordPolicyVulnerability : Vulnerability
    {
        /// <summary>
        /// Types of password vulnerabilities that can be checked
        /// </summary>
        public enum PasswordVulnerabilityType
        {
            /// <summary>
            /// The minimum age of a password once created
            /// </summary>
            MinimumPasswordAge,
            /// <summary>
            /// The maximum age of a password once created
            /// </summary>
            MaximumPasswordAge,
            /// <summary>
            /// The minimum length of a password
            /// </summary>
            MinimumPasswordLength,
            /// <summary>
            /// The minimum amount of passwords to remember to prevent duplicate passwords
            /// </summary>
            PasswordHistoryLength,
            /// <summary>
            /// Force passwords to meet microsoft standard complexity requirements
            /// </summary>
            PasswordComplexity,
            /// <summary>
            /// Prevent users from changing passwords without logging in, unless their password is expired
            /// </summary>
            NoAnonymousPasswordChange,
            /// <summary>
            /// Prevent the domain controller from sending plaintext passwords when logging a user in
            /// </summary>
            DomainPlaintextExchange,
            /// <summary>
            /// Lock the built in administrator from logging in over the network
            /// </summary>
            NetLockoutBuiltinAdmin,
            /// <summary>
            /// Prevent the domain from storing user passwords as plain text
            /// </summary>
            NoDomainPlaintextPasswords,
            /// <summary>
            /// Force the domain automatically change the machine account password weekly
            /// </summary>
            DomainAutoPasswordChange
        }

        /// <summary>
        /// SAM information
        /// </summary>
        private static SamServer SAM { get; } = new SamServer(Environment.MachineName, SamServer.SERVER_ACCESS_MASK.SAM_SERVER_ALL_ACCESS);
        private static SecurityIdentifier DomainSID { get; } = SAM.GetDomainSid(Environment.MachineName);
        private static SamServer.DOMAIN_PASSWORD_INFORMATION PasswordInfo
        {
            get
            {
                return SAM.GetDomainPasswordInformation(DomainSID);
            }
        }

        private readonly PasswordVulnerabilityType VulnType;
        private readonly int TargetValue;

        /// <summary>
        /// Internal use only
        /// </summary>
        public PasswordPolicyVulnerability()
        {

        }

        /// <summary>
        /// A password setting related vulnerability
        /// </summary>
        /// <param name="points">Amount of points to award on completion</param>
        /// <param name="vulntype">The type of password vulnerability to score</param>
        /// <param name="targetvalue">The target value of the password vulnerability</param>
        public PasswordPolicyVulnerability(int points, PasswordVulnerabilityType vulntype, int targetvalue = 0) : base(points)
        {
            VulnType = vulntype;
            TargetValue = targetvalue;
            OnCompleted += VulnComplete;
        }

        private void VulnComplete(Vulnerability v, VulnerabilityEventArgs e)
        {
            switch(VulnType)
            {
                case PasswordVulnerabilityType.DomainAutoPasswordChange:
                    Message = "The domain is configured to automatically change the machine password once a week";
                    break;
                case PasswordVulnerabilityType.DomainPlaintextExchange:
                    Message = "The domain no longer sends passwords in plaintext";
                    break;
                case PasswordVulnerabilityType.MaximumPasswordAge:
                    Message = "The maximum password age requirement has been reduced to " + TargetValue + " days or lower";
                    break;
                case PasswordVulnerabilityType.MinimumPasswordAge:
                    Message = "The minimum password age requirement has been increased to " + TargetValue + " days or higher";
                    break;
                case PasswordVulnerabilityType.MinimumPasswordLength:
                    Message = "The minimum password length requirement has been increased to " + TargetValue + " characters or longer";
                    break;
                case PasswordVulnerabilityType.NetLockoutBuiltinAdmin:
                    Message = "The domain now correctly locks out the built in administrator from network loginss";
                    break;
                case PasswordVulnerabilityType.NoAnonymousPasswordChange:
                    Message = "The domain no longer allows password changes without loggin in";
                    break;
                case PasswordVulnerabilityType.NoDomainPlaintextPasswords:
                    Message = "The domain controller is no longer allowed to store plaintext passwords";
                    break;
                case PasswordVulnerabilityType.PasswordComplexity:
                    Message = "Passwords are now required to be adequately complex";
                    break;
                case PasswordVulnerabilityType.PasswordHistoryLength:
                    Message = "The amount of passwords remembered is now correctly set to " + TargetValue + " or above";
                    break;
            }
        }

        /// <summary>
        /// A password based vulnerability
        /// </summary>
        /// <param name="args">0:points,1:vulntype,2?:targetvalue</param>
        /// <returns></returns>
        public override Vulnerability TranslateArgs(params string[] args)
        {
            try
            {
                Enum.TryParse(args[1], true, out PasswordVulnerabilityType vulntype);
                if (args.Length > 2)
                    return new PasswordPolicyVulnerability(Convert.ToInt32(args[0]), vulntype, Convert.ToInt32(args[2]));
                return new PasswordPolicyVulnerability(Convert.ToInt32(args[0]), vulntype);
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// Evaluate the vulnerability condition
        /// </summary>
        protected override void EvaluateVulnerability()
        {
            switch (VulnType)
            {
                case PasswordVulnerabilityType.DomainAutoPasswordChange:
                    Completed = (int)(PasswordInfo.PasswordProperties & SamServer.PASSWORD_PROPERTIES.DOMAIN_REFUSE_PASSWORD_CHANGE) == 0;
                    break;
                case PasswordVulnerabilityType.DomainPlaintextExchange:
                    Completed = (int)(PasswordInfo.PasswordProperties & SamServer.PASSWORD_PROPERTIES.DOMAIN_PASSWORD_NO_CLEAR_CHANGE) == 1;
                    break;
                case PasswordVulnerabilityType.MaximumPasswordAge:
                    Completed = PasswordInfo.MaxPasswordAge.Days <= TargetValue;
                    break;
                case PasswordVulnerabilityType.MinimumPasswordAge:
                    Completed = PasswordInfo.MinPasswordAge.Days >= TargetValue;
                    break;
                case PasswordVulnerabilityType.MinimumPasswordLength:
                    Completed = PasswordInfo.MinPasswordLength >= TargetValue;
                    break;
                case PasswordVulnerabilityType.NetLockoutBuiltinAdmin:
                    Completed = (int)(PasswordInfo.PasswordProperties & SamServer.PASSWORD_PROPERTIES.DOMAIN_LOCKOUT_ADMINS) == 1;
                    break;
                case PasswordVulnerabilityType.NoAnonymousPasswordChange:
                    Completed = (int)(PasswordInfo.PasswordProperties & SamServer.PASSWORD_PROPERTIES.DOMAIN_PASSWORD_NO_ANON_CHANGE) == 1;
                    break;
                case PasswordVulnerabilityType.NoDomainPlaintextPasswords:
                    Completed = (int)(PasswordInfo.PasswordProperties & SamServer.PASSWORD_PROPERTIES.DOMAIN_PASSWORD_STORE_CLEARTEXT) == 0;
                    break;
                case PasswordVulnerabilityType.PasswordComplexity:
                    Completed = (int)(PasswordInfo.PasswordProperties & SamServer.PASSWORD_PROPERTIES.DOMAIN_PASSWORD_COMPLEX) == 1;
                    break;
                case PasswordVulnerabilityType.PasswordHistoryLength:
                    Completed = PasswordInfo.MinPasswordLength >= TargetValue;
                    break;
            }
        }
    }
}
