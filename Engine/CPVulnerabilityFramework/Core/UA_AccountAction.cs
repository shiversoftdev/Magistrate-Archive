using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace CPVulnerabilityFramework.Core
{
    /// <summary>
    /// Success: Action taken, Regression: Depends, Failure: Depends
    /// </summary>
    public sealed class UA_AccountAction : UserAccountVulnerability
    {
        private readonly string GroupName;

        /// <summary>
        /// A user account action vulnerability
        /// </summary>
        /// <param name="points">Points to award on completion</param>
        /// <param name="vulntype">The type of vulnerability. A non-actionable vulntype will result in an inactive vulnerability</param>
        /// <param name="username">The username (case sensitive) of the target user</param>
        /// <param name="groupname">The name of the group to evaluate</param>
        public UA_AccountAction(int points, AccountVulnType vulntype, string username, string groupname = null): base(points, vulntype, username)
        {
            if (!Enabled)
                return;
            //Unlock todo
            switch (vulntype)
            {
                case AccountVulnType.Add:
                case AccountVulnType.Remove:
                    RegressionEnabled = false;
                    break;
                case AccountVulnType.Promote:
                case AccountVulnType.Demote:
                case AccountVulnType.Enable:
                case AccountVulnType.Disable:
                case AccountVulnType.Unlock:
                case AccountVulnType.AddGroup:
                case AccountVulnType.RemoveGroup:
                    RegressionEnabled = true;
                    break;
                default:
                    Enabled = false;
                    return;
            }
            if (User == null)
                Enabled = false;
            GroupName = groupname?.ToLower() ?? "";
            OnCompleted += VulnComplete;
            OnFailed += VulnDestroyed;
        }

        /// <summary>
        /// Internal use only
        /// </summary>
        public UA_AccountAction() : base()
        {

        }

        /// <summary>
        /// Create a vuln from string arguments
        /// </summary>
        /// <param name="args">0:points,1:vulntype,2:username,3?:groupname</param>
        /// <returns></returns>
        public override Vulnerability TranslateArgs(params string[] args)
        {
            try
            {
                int ipoints = Convert.ToInt32(args[0]);
                Enum.TryParse(args[1], true, out AccountVulnType vtype);
                return new UA_AccountAction(ipoints, vtype, args[2], args.Length > 3 ? args[3] : null);
            }
            catch
            {
                return null;
            }
        }


        private void VulnComplete(Vulnerability sender, VulnerabilityEventArgs e)
        {
            switch(VulnType)
            {
                case AccountVulnType.Add:
                    Message = UserName + " was added to the users list";
                    break;
                case AccountVulnType.Remove:
                    Message = UserName + " was removed from the users list";
                    break;
                case AccountVulnType.Promote:
                    Message = UserName + " was promoted to the correct authority level";
                    break;
                case AccountVulnType.Demote:
                    Message = UserName + " was demoted to the correct authority level";
                    break;
                case AccountVulnType.Enable:
                    Message = UserName + " has been enabled";
                    break;
                case AccountVulnType.Disable:
                    Message = UserName + " has been disabled";
                    break;
                case AccountVulnType.Unlock:
                    Message = UserName + " has been unlocked";
                    break;
                case AccountVulnType.AddGroup:
                    Message = UserName + " has been added to " + GroupName;
                    break;
                case AccountVulnType.RemoveGroup:
                    Message = UserName + " has been removed from " + GroupName;
                    break;
            }
        }

        private void VulnDestroyed(Vulnerability sender, VulnerabilityEventArgs e)
        {
            Message = UserName + " was destroyed beyond repair";
        }

        /// <summary>
        /// Evaluate the vulnerability for completion
        /// </summary>
        protected override void EvaluateVulnerability()
        {
            try
            {
                switch (VulnType)
                {
                    case AccountVulnType.Add:
                        if (User != null)
                            Completed = true;
                        break;
                    case AccountVulnType.Remove:
                        if (User == null)
                            Completed = true;
                        break;
                    case AccountVulnType.Promote:
                        if (this.HasGroup("administrators"))
                            Completed = true;
                        break;
                    case AccountVulnType.Demote:
                        if (!this.HasGroup("administrators"))
                            Completed = true;
                        break;
                    case AccountVulnType.Enable:
                        if (!UserFlagSet(UserFlags.ADS_UF_ACCOUNTDISABLE))
                            Completed = true;
                        break;
                    case AccountVulnType.Disable:
                        if (UserFlagSet(UserFlags.ADS_UF_ACCOUNTDISABLE))
                            Completed = true;
                        break;
                    case AccountVulnType.Unlock:
                        if (!UserFlagSet(UserFlags.ADS_UF_LOCKOUT))
                            Completed = true;
                        break;
                    case AccountVulnType.AddGroup:
                        if(this.HasGroup(GroupName))
                            Completed = true;
                        break;
                    case AccountVulnType.RemoveGroup:
                        if (!this.HasGroup(GroupName))
                            Completed = true;
                        break;
                }
            }
            catch
            {
                Failed = true;
            }
            
        }
    }
}
